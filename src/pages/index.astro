---
// src/pages/index.astro
import Layout from '../layouts/BaseLayout.astro';
import VideoCard from '../components/VideoCard.astro';
import { slugify } from '../utils/slugify';
import { getAllVideos, type VideoData } from '../utils/data';
import { nama, desk, url, terbit } from '../utils/site.ts';

export const prerender = true;

const allVideos: VideoData[] = await getAllVideos();

const videosByCategory: { [key: string]: VideoData[] } = {};
const numberOfVideosPerCategory = 16; // Jumlah video acak yang ingin ditampilkan per kategori

// Set untuk melacak judul video yang sudah digunakan agar tidak ada duplikasi
const usedTitles = new Set<string>();

allVideos.forEach(video => {
  if (!videosByCategory[video.category]) {
    videosByCategory[video.category] = [];
  }
  videosByCategory[video.category].push(video);
});

// --- PERUBAHAN KUNCI DI SINI: Acak dan pilih video unik per kategori ---
const finalVideosByCategory: { [key: string]: VideoData[] } = {};
const allCategoryNames = Object.keys(videosByCategory);

allCategoryNames.forEach(categoryName => {
  const videosInThisCategory = videosByCategory[categoryName];
  
  // Acak video di dalam kategori ini
  const shuffledVideosInThisCategory = videosInThisCategory
    .sort(() => 0.5 - Math.random());
  
  const selectedVideosForCategory: VideoData[] = [];
  
  // Iterasi melalui video yang diacak dan tambahkan hanya yang judulnya unik
  for (const video of shuffledVideosInThisCategory) {
    // Ubah judul menjadi lowercase dan trim untuk perbandingan case-insensitive
    const normalizedTitle = video.title.toLowerCase().trim();
    if (!usedTitles.has(normalizedTitle)) {
      selectedVideosForCategory.push(video);
      usedTitles.add(normalizedTitle); // Tambahkan judul ke set yang sudah digunakan
    }
    // Hentikan jika sudah mencapai jumlah video yang diinginkan per kategori
    if (selectedVideosForCategory.length >= numberOfVideosPerCategory) {
      break;
    }
  }
  
  finalVideosByCategory[categoryName] = selectedVideosForCategory;
});

const sortedCategories = Object.keys(finalVideosByCategory).sort(); // Urutkan kategori secara alfabetis untuk tampilan

const numberOfRandomVideos = 16;

// Tidak perlu lagi categoryVideoIds karena `usedTitles` sudah mencakup semua video yang terpilih
// di finalVideosByCategory. Kita akan filter `allVideos` berdasarkan `usedTitles`.

const randomVideos: VideoData[] = [];
const videosForRandomSelection = allVideos.filter(video => {
  const normalizedTitle = video.title.toLowerCase().trim();
  return !usedTitles.has(normalizedTitle); // Hanya ambil video yang judulnya belum terpakai
});

// Pilih video acak dari sisa video yang judulnya belum terpakai
const shuffledRandomSelection = videosForRandomSelection
  .sort(() => 0.5 - Math.random());

for (const video of shuffledRandomSelection) {
    const normalizedTitle = video.title.toLowerCase().trim();
    if (!usedTitles.has(normalizedTitle)) { // Periksa lagi, meskipun seharusnya sudah difilter
        randomVideos.push(video);
        usedTitles.add(normalizedTitle); // Tambahkan judul ke set yang sudah digunakan
    }
    if (randomVideos.length >= numberOfRandomVideos) {
        break;
    }
}

const allDomains = new Set<string>();

// Iterasi melalui finalVideosByCategory (yang sudah unik)
Object.values(finalVideosByCategory).flat().forEach(video => {
  try {
    if (video.thumbnail) {
      allDomains.add(new URL(video.thumbnail).origin);
    }
    if (video.embedUrl) {
      allDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${video.id} (videosByRandomCategory):`, e);
  }
});

// Iterasi melalui randomVideos (yang juga sudah unik)
randomVideos.forEach(video => {
  try {
    if (video.thumbnail) {
      allDomains.add(new URL(video.thumbnail).origin);
    }
    if (video.embedUrl) {
      allDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${video.id} (randomVideos):`, e);
  }
});

const preconnectDomains = Array.from(allDomains);
const url = import.meta.env.PUBLIC_SITE_URL;
const nama = import.meta.env.PUBLIC_SITE_NAME;
const desk = import.meta.env.PUBLIC_SITE_DESCRIPTION;
const terbit = import.meta.env.PUBLIC_SITE_PUBLISHED_DATE;

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
];

const currentUrl = url;
const siteName = nama;
const siteDescription = desk;


---

<Layout
  title={`${nama} - Video Bokep Indo Terbaru`}
  description={siteDescription}
  preconnectDomains={preconnectDomains}
  siteName={siteName}
  siteUrl={currentUrl}
>

  <main class="home-page" itemscope itemtype="http://schema.org/WebPage">
    <meta itemprop="url" content={currentUrl} />
    <meta itemprop="name" content={`${nama} - Video Bokep Indo Terbaru`} />
    <meta itemprop="description" content={desk} />
    <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content={siteName} />
      <div itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
        <meta itemprop="url" content={`${currentUrl}/logo.png`} />
      </div>
    </div>
    <meta itemprop="datePublished" content={terbit}/>
    <meta itemprop="dateModified" content={new Date().toISOString()} />

    <section class="hero-section">
      <h1 itemprop="headline">Nonton Video Streaming {nama}</h1>
      <p itemprop="description">{nama} {desk}</p>
    </section>

      <section class="random-videos-section">
    {randomVideos.length > 0 && (
        <h2 class="section-title">Video Pilihan</h2><div class="video-grid">
          {randomVideos.map((video) => (
            <VideoCard video={video} />
          ))}
        </div>
      </section>
    )}

<section class="all-categories-section">
      {sortedCategories.length === 0 ? (
        <p class="no-videos-overall">Belum ada video yang tersedia di portal ini.</p>
      ) : (
        // Menggunakan sortedCategories dan finalVideosByCategory
        sortedCategories.map(categoryName => (
          <div class="category-group">
            <h2 class="category-title">
              {categoryName}
            </h2>
            <div class="video-grid">
              {finalVideosByCategory[categoryName].length === 0 ? (
                <p class="no-videos-in-category">Tidak ada video dalam kategori ini.</p>
              ) : (
                finalVideosByCategory[categoryName].map((video) => (
                  <VideoCard video={video} />
                ))
              )}
            </div>
            {/* Cek dari videosByCategory (yang asli, lengkap) untuk menentukan apakah tombol "Lihat Semua" diperlukan */}
            {videosByCategory[categoryName] && videosByCategory[categoryName].length > numberOfVideosPerCategory && (
              <div class="view-all-button-container">
                <a href={`${currentUrl}/category/${slugify(categoryName)}/1`} class="view-all-button">Lihat Semua di kategori {categoryName}</a>
              </div>
            )}
          </div>
        ))
      )}
    </section>
  </main>
</Layout>